events {
    worker_connections 1024;
}

#
# For Mutual TLS authentication use TLS passthrough to https://login.example.com
#
stream {

    server {
        listen 3000;

        # Use the Docker embedded DNS server
        resolver 127.0.0.11;

        # Route to the internal URL
        set $internal_hostname 'login.example.com:8443';
        proxy_pass $internal_hostname;
    }
}

#
# For Mutual TLS API calls to https://api.example.com, terminate TLS at the proxy
#
http {

    server {
        server_name  api.example.com;
        listen 3001 ssl;
        ssl_certificate         /usr/local/openresty/certs/example.tls.pem;
        ssl_certificate_key     /usr/local/openresty/certs/example.tls.key;
        ssl_trusted_certificate /usr/local/openresty/certs/root.pem;
        ssl_client_certificate  /usr/local/openresty/certs/root.pem;
        ssl_verify_client on;

        location ~ ^/ {

            # Use the Docker embedded DNS server
            resolver 127.0.0.11;

            # Route to the internal URL and include the client certificate public key in a custom header
            set $internal_hostname 'api.example.internal:3000';
            proxy_set_header x-example-client-public-key $ssl_client_escaped_cert;
            proxy_pass http://$internal_hostname$uri$is_args$args;
        }
    }
}
