events {
    worker_connections 1024;
}
error_log logs/error.log info;

#
# All services are exposed using a single port of 443, and all traffic is streamed here first
#
stream {

    # For this host, stream directly to the internal Curity Identity Server
    upstream identity-server {
        server login.example.com:8443;
    }
    
    # For this host, route to the following http block
    upstream api-server {
        server api.example.com:3001;
    }

    # Calculate the upstream based on pre-reading the host name 
    map $ssl_preread_server_name $upstream {
        login.example.com identity-server;
        default           api-server;
    }

    # Requests to https://login.example.com use TLS passthrough
    server {
        listen 3000;
        resolver 127.0.0.11;
        proxy_pass $upstream;
        ssl_preread on;
    }
}

#
# Requests to https://api.example.com terminate TLS at the reverse proxy
#
http {

    server {
        
        server_name api.example.com;
        listen 3001 ssl;
        
        # Configure settings for verifying the Mutual TLS connection at the proxy
        ssl_certificate             /usr/local/openresty/certs/example.tls.pem;
        ssl_certificate_key         /usr/local/openresty/certs/example.tls.key;
        ssl_trusted_certificate     /usr/local/openresty/certs/root.pem;
        ssl_client_certificate      /usr/local/openresty/certs/root.pem;
        lua_ssl_trusted_certificate /usr/local/openresty/certs/root.pem;
        ssl_verify_client on;

        location ~ ^/ {

            # Use the Docker embedded DNS server
            resolver 127.0.0.11;

            # Run the phantom token plugin, to exchange the opaque token for a JWT and forward it to the API
            rewrite_by_lua_block {

                local config = {
                    introspection_endpoint = 'https://login.example.com:8443/oauth/v2/oauth-introspect',
                    client_id = 'introspect-client',
                    client_secret = 'Password1'
                }

                local phantomTokenPlugin = require 'phantom-token-plugin'
                phantomTokenPlugin.execute(config)
            }

            # Forward the client certificate public key to the API, via a custom header
            proxy_set_header x-example-client-public-key $ssl_client_escaped_cert;

            # For simplicity the example API uses HTTP
            set $internal_api_hostname 'api.example.internal:3000';
            proxy_pass http://$internal_api_hostname$uri$is_args$args;
        }
    }
}
